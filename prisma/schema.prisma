// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  name             String
  email            String             @unique
  password         String
  role             Role               @default(USER)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime?          @updatedAt @map("updated_at")
  Member           Member[]
  Product          Product[]
  Category         Category[]
  StockTransaction StockTransaction[]

  @@map("users")
}

model Member {
  id                 String    @id @unique @default(uuid())
  membershipNumber   Int       @unique @default(autoincrement()) @map("membership_number")
  photoUrl           String?   @map("photo_url")
  fullName           String    @map("full_name")
  genderId           Int       @map("gender_id")
  dateOfBirth        DateTime  @map("date_of_Birth")
  nationalityId      Int       @map("nationality_id")
  placeOfBirth       String    @map("place_of_birth")
  contact            String
  email              String
  modalityId         Int       @map("modality_id")
  frequencyId        Int       @map("frequency_id")
  memberTypeId       Int       @map("memberType_id")
  paymentFrequencyId Int       @map("paymentFrequency_id")
  termsAndConditions Boolean   @map("terms_and_conditions")
  healthDeclaration  Boolean   @map("health_declaration")
  createdAt          DateTime  @default(now()) @map("created_at")
  createdBy          String    @map("created_by")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  active             Boolean   @default(true)

  IdentityDocument IdentityDocument[]
  Address          Address[]
  Guardian         Guardian[]
  payment          Payment[]

  user             User             @relation(fields: [createdBy], references: [id])
  gender           Gender           @relation(fields: [genderId], references: [id])
  nationality      Nationality      @relation(fields: [nationalityId], references: [id])
  modality         Modality         @relation(fields: [modalityId], references: [id])
  frequency        Frequency        @relation(fields: [frequencyId], references: [id])
  memberType       MemberType       @relation(fields: [memberTypeId], references: [id])
  paymentFrequency PaymentFrequency @relation(fields: [paymentFrequencyId], references: [id])
  Attendance       Attendance[]

  @@map("members")
}

model IdentityDocument {
  id                      String    @id @unique @default(uuid())
  memberId                String    @map("member_id")
  identityDocumentTypeId  Int       @map("identity_document_type_id")
  identificationNumber    String    @map("identification_number")
  expireDate              DateTime  @map("expire_date")
  taxIdentificationNumber String    @map("tax_identification_number")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime? @updatedAt @map("updated_at")

  member           Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  identityDocument IdentityDocumentType @relation(fields: [identityDocumentTypeId], references: [id])

  @@map("identification_documents")
}

model Address {
  id         String    @id @unique @default(uuid())
  memberId   String    @map("member_id")
  address    String
  city       String
  county     String
  parish     String
  postalCode String    @map("postal_code")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Guardian {
  id                   String    @id @unique @default(uuid())
  fullName             String    @map("full_name")
  memberId             String    @map("member_id")
  relationshipDegreeId Int       @map("relationship_degree_id")
  contact              String
  address              String
  city                 String
  county               String
  parish               String
  postalCode           String    @map("postal_code")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime? @updatedAt @map("updated_at")

  Member             Member             @relation(fields: [memberId], references: [id], onDelete: Cascade)
  RelationshipDegree RelationshipDegree @relation(fields: [relationshipDegreeId], references: [id])

  @@map("guardians")
}

model Gender {
  id          Int      @id @unique @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  active      Boolean  @default(true)
  Member      Member[]

  @@map("genres")
}

model Nationality {
  id          Int      @id @unique @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  active      Boolean  @default(true)
  Member      Member[]

  @@map("nationalities")
}

model Modality {
  id          Int          @id @unique @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  active      Boolean      @default(true)
  Member      Member[]
  Attendance  Attendance[]

  @@map("modalities")
}

model Frequency {
  id          Int      @id @unique @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  active      Boolean  @default(true)
  Member      Member[]

  @@map("frequencies")
}

model MemberType {
  id          Int      @id @unique @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  active      Boolean  @default(true)
  Member      Member[]

  @@map("member_types")
}

model PaymentFrequency {
  id          Int      @id @unique @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  active      Boolean  @default(true)
  Member      Member[]

  @@map("payment_frequencies")
}

model RelationshipDegree {
  id          Int        @id @unique @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  active      Boolean    @default(true)
  Guardian    Guardian[]

  @@map("relationship_degrees")
}

model IdentityDocumentType {
  id               Int                @id @unique @default(autoincrement())
  name             String
  description      String?
  createdAt        DateTime           @default(now()) @map("created_at")
  active           Boolean            @default(true)
  IdentityDocument IdentityDocument[]

  @@map("identity_document_types")
}

enum Role {
  USER
  ADMIN
}

model Payment {
  id            String        @id @unique @default(uuid())
  memberId      String        @map("member_id")
  paymentType   PaymentType   @map("payment_type")
  paymentDate   DateTime      @map("payment_date")
  paymentAmount Float         @map("payment_amount")
  paymentMethod PaymentMethod @map("payment_method")
  createdAt     DateTime      @default(now()) @map("created_at")
  createdBy     String        @map("created_by")
  updatedAt     DateTime?     @updatedAt @map("updated_at")

  PaymentRecipts PaymentRecipts[]

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentMethod {
  MBWAY
  MULTIBANCO
  TRANSFERENCIA_BANCARIA
  DINHEIRO
}

enum PaymentType {
  COTA_MENSAL
  COTA_ANUAL
  SEGURO
}

model PaymentRecipts {
  id                    String    @id @unique @default(uuid())
  paymentId             String    @map("payment_id")
  receiptNumber         Int       @map("recipt_number")
  receiptYear           Int       @map("recipt_year")
  receiptTaxDescription String    @map("receipt_tax_description")
  receiptTaxPercentage  Float     @map("receipt_tax_percentage")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime? @updatedAt @map("updated_at")
  createdBy             String    @map("created_by")

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("payment_recipts")
}

model Attendance {
  id             String    @id @unique @default(uuid())
  memberId       String    @map("member_id")
  attendanceDate DateTime  @map("attendance_date")
  modalityId     Int       @map("modality_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  createdBy      String    @map("created_by")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  member   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  modality Modality @relation(fields: [modalityId], references: [id], onDelete: Cascade)

  @@map("attendances")
}

// inventory management

model Product {
  id               String             @id @unique @default(uuid())
  name             String
  description      String?
  price            Float
  quantity         Int
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime?          @updatedAt @map("updated_at")
  userId           String             @map("user_id")
  Category         Category[]
  StockTransaction StockTransaction[]

  user User @relation(fields: [userId], references: [id])

  @@map("products")
}

model Category {
  id          String    @id @unique @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  userId      String    @map("user_id")
  Product     Product[]

  user User @relation(fields: [userId], references: [id])

  @@map("categories")
}

model StockTransaction {
  id        String    @id @unique @default(uuid())
  productId String    @map("product_id")
  quantity  Int
  price     Float
  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  userId    String    @map("user_id")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@map("stock_transactions")
}
